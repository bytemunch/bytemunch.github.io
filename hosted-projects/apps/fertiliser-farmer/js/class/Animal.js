import { WorldActor } from "./WorldActor.js";
import { sprites, fElapsedTime, tileGrid, saveGame, LAYERNUMBERS } from "../main.js";
import { Item } from "./Item.js";
export const newAnimalFromJSON = JSONData => {
    switch (JSONData.type.split('-')[1]) {
        case 'chicken':
            return new Chicken([JSONData._x, JSONData._y]);
        default:
            console.error(JSONData.type, 'not found');
    }
};
export class Animal extends WorldActor {
    constructor() {
        super(...arguments);
        this.layer = LAYERNUMBERS.animal;
        this.target = [0, 0];
        this.state = 'roam';
        this.age = 0; //in frames
        this.lastBred = 0; //relative to age
        this.lastPoop = 0; //relative to age
        this.lastAte = 0; //relative to age
        this.poopTime = 5 * 60; //frames
        this.poopSize = 1;
        this.directionVec = [Math.random() - 0.5, Math.random() - 0.5];
        this.speed = 5;
    }
    roam() {
        if (this.age % (10 * 60) == 0) {
            this.directionVec = [(Math.random() - 0.5) * this.speed * fElapsedTime,
                (Math.random() - 0.5) * this.speed * fElapsedTime];
        }
        if (this.underfoot(this.nextPos(this.directionVec))?.type != 'grass') {
            this.directionVec = [(Math.random() - 0.5) * this.speed * fElapsedTime,
                (Math.random() - 0.5) * this.speed * fElapsedTime];
        }
        else {
            this._x += this.directionVec[0];
            this._y += this.directionVec[1];
        }
    }
    eat() {
        console.log('eating not implemented!');
    }
    poop() {
        let tile = this.underfoot(this.basePos);
        if (tile?.type == 'grass' && tile?.contents == null) {
            tileGrid[tile.gridX][tile.gridY].contents = new Item({
                gridPosition: { gridX: tile.gridX, gridY: tile.gridY },
                sprite: sprites[`poop-${this.poopSize}`],
                type: `poop`,
                level: this.poopSize
            });
            this.lastPoop = this.age;
            this.state = 'roam';
            saveGame();
        }
    }
    breed() {
        console.log('breeding not implemented!');
    }
    update() {
        this.age++;
        if (this.age % this.poopTime == 0)
            this.state = 'poop';
        switch (this.state) {
            case 'roam':
                this.roam();
                break;
            case 'poop':
                this.roam();
                this.poop();
                break;
        }
    }
    get basePos() {
        return [this.x + this.width / 2, this.y + this.height];
    }
    nextPos(velocity) {
        return [this.basePos[0] + velocity[0], this.basePos[1] + velocity[1]];
    }
    underfoot(position) {
        for (let gtile of tileGrid.flat()) {
            let tile = gtile.tile;
            if (tile.baseClass != 'tile')
                continue;
            if (tile.collides(position[0], position[1])) {
                return tile;
            }
        }
    }
}
export class Chicken extends Animal {
    constructor(position) {
        super({
            gridPosition: { gridX: 0, gridY: 0 },
            sprite: sprites['animal-chicken'],
            type: 'animal-chicken',
        });
        this.width = 32;
        this.height = 32;
        this._x = position[0];
        this._y = position[1];
        console.log(this);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
