import { UIElement } from './UIElements.js';
import { LAYERNUMBERS, fElapsedTime, camera, layers, extraActors, sprites, addXp, addCoins } from '../main.js';
export class Drop extends UIElement {
    constructor(opts) {
        super(opts);
        this.age = 0;
        this.layer = LAYERNUMBERS.item;
        this.mag = 0;
        this.width = 16;
        this.height = 16;
        this.directionVector = [1 - Math.random() * 2, -1 - Math.random()];
        let dX = opts.targetPos[0] - this.left;
        let dY = opts.targetPos[1] - this.top;
        this.mag = Math.sqrt(dX ** 2 + dY ** 2);
        this.targetDirection = [
            dX / this.mag,
            dY / this.mag
        ];
    }
    update() {
        this.age += fElapsedTime * 5;
        if (this.age < 10) {
            this.top += this.directionVector[1] * fElapsedTime * 5;
        }
        else if (this.age < 20) {
            this.top -= this.directionVector[1] * fElapsedTime * 5;
        }
        if (this.age < 20) {
            this.left += this.directionVector[0] * fElapsedTime * 5;
        }
        else {
            this.left += this.targetDirection[0] * (this.mag / 3) * fElapsedTime;
            this.top += this.targetDirection[1] * (this.mag / 3) * fElapsedTime;
        }
        if (this.left > camera.right || this.top > camera.bottom || this.left < camera.x || this.top < camera.y)
            this.removeNextDraw = true;
    }
    draw() {
        let ctx = layers[this.layer].ctx;
        ctx.drawImage(this.img, this.left, this.top, this.img.width, this.img.height);
    }
    destroy() {
        extraActors.splice(extraActors.indexOf(this), 1);
    }
}
export class XPDrop extends Drop {
    constructor() {
        super(...arguments);
        this.sprite = sprites.xp;
    }
    destroy() {
        super.destroy();
        addXp(this.value);
    }
}
export class Coin extends Drop {
    constructor() {
        super(...arguments);
        this.sprite = sprites.coin;
    }
    destroy() {
        super.destroy();
        addCoins(this.value);
    }
}
export class ItemDrop extends Drop {
    constructor(opts) {
        super(opts);
        this.level = opts.level;
    }
    finish() {
        // set callback in options
        console.log('no callback for ', this);
    }
    destroy() {
        super.destroy();
        this.finish();
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SSxDQUFDLENBQUE7SUFDekMsQ0FBQztJQUVELE9BQU87UUFDSCxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xCLENBQUM7Q0FDSiIsImZpbGUiOiJjbGFzcy9Ecm9wLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVUlFbGVtZW50LCBJVUlPcHRpb25zIH0gZnJvbSAnLi9VSUVsZW1lbnRzLmpzJztcbmltcG9ydCB7IExBWUVSTlVNQkVSUywgZkVsYXBzZWRUaW1lLCBjYW1lcmEsIGxheWVycywgZXh0cmFBY3RvcnMsIHNwcml0ZXMsIGFkZFhwLCBhZGRDb2lucyB9IGZyb20gJy4uL21haW4uanMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElEcm9wT3B0aW9ucyBleHRlbmRzIElVSU9wdGlvbnMge1xuICAgIHRhcmdldFBvczogbnVtYmVyW107XG4gICAgdmFsdWU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIERyb3AgZXh0ZW5kcyBVSUVsZW1lbnQge1xuICAgIGFnZSA9IDA7XG4gICAgZGlyZWN0aW9uVmVjdG9yOiBudW1iZXJbXTtcblxuICAgIHRhcmdldERpcmVjdGlvbjogbnVtYmVyW107XG4gICAgdmFsdWU7XG5cbiAgICBsYXllciA9IExBWUVSTlVNQkVSUy5pdGVtO1xuXG4gICAgbWFnID0gMDtcblxuICAgIGNvbnN0cnVjdG9yKG9wdHM6IElEcm9wT3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRzKTtcblxuICAgICAgICB0aGlzLndpZHRoID0gMTY7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gMTY7XG5cbiAgICAgICAgdGhpcy5kaXJlY3Rpb25WZWN0b3IgPSBbMSAtIE1hdGgucmFuZG9tKCkgKiAyLCAtMSAtIE1hdGgucmFuZG9tKCldO1xuXG4gICAgICAgIGxldCBkWCA9IG9wdHMudGFyZ2V0UG9zWzBdIC0gdGhpcy5sZWZ0O1xuICAgICAgICBsZXQgZFkgPSBvcHRzLnRhcmdldFBvc1sxXSAtIHRoaXMudG9wO1xuXG4gICAgICAgIHRoaXMubWFnID0gTWF0aC5zcXJ0KGRYICoqIDIgKyBkWSAqKiAyKTtcblxuICAgICAgICB0aGlzLnRhcmdldERpcmVjdGlvbiA9IFtcbiAgICAgICAgICAgIGRYIC8gdGhpcy5tYWcsXG4gICAgICAgICAgICBkWSAvIHRoaXMubWFnXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgICB0aGlzLmFnZSArPSBmRWxhcHNlZFRpbWUgKiA1O1xuXG4gICAgICAgIGlmICh0aGlzLmFnZSA8IDEwKSB7XG4gICAgICAgICAgICB0aGlzLnRvcCArPSB0aGlzLmRpcmVjdGlvblZlY3RvclsxXSAqIGZFbGFwc2VkVGltZSAqIDU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hZ2UgPCAyMCkge1xuICAgICAgICAgICAgdGhpcy50b3AgLT0gdGhpcy5kaXJlY3Rpb25WZWN0b3JbMV0gKiBmRWxhcHNlZFRpbWUgKiA1O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYWdlIDwgMjApIHtcbiAgICAgICAgICAgIHRoaXMubGVmdCArPSB0aGlzLmRpcmVjdGlvblZlY3RvclswXSAqIGZFbGFwc2VkVGltZSAqIDU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxlZnQgKz0gdGhpcy50YXJnZXREaXJlY3Rpb25bMF0gKiAodGhpcy5tYWcgLyAzKSAqIGZFbGFwc2VkVGltZTtcbiAgICAgICAgICAgIHRoaXMudG9wICs9IHRoaXMudGFyZ2V0RGlyZWN0aW9uWzFdICogKHRoaXMubWFnIC8gMykgKiBmRWxhcHNlZFRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5sZWZ0ID4gY2FtZXJhLnJpZ2h0IHx8IHRoaXMudG9wID4gY2FtZXJhLmJvdHRvbSB8fCB0aGlzLmxlZnQgPCBjYW1lcmEueCB8fCB0aGlzLnRvcCA8IGNhbWVyYS55KVxuICAgICAgICAgICAgdGhpcy5yZW1vdmVOZXh0RHJhdyA9IHRydWU7XG4gICAgfVxuXG4gICAgZHJhdygpIHtcbiAgICAgICAgbGV0IGN0eCA9IGxheWVyc1t0aGlzLmxheWVyXS5jdHg7XG5cbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmltZywgdGhpcy5sZWZ0LCB0aGlzLnRvcCwgdGhpcy5pbWcud2lkdGgsIHRoaXMuaW1nLmhlaWdodCk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgZXh0cmFBY3RvcnMuc3BsaWNlKGV4dHJhQWN0b3JzLmluZGV4T2YodGhpcyksIDEpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFhQRHJvcCBleHRlbmRzIERyb3Age1xuICAgIHNwcml0ZSA9IHNwcml0ZXMueHA7XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgICAgIGFkZFhwKHRoaXMudmFsdWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvaW4gZXh0ZW5kcyBEcm9wIHtcbiAgICBzcHJpdGUgPSBzcHJpdGVzLmNvaW47XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgICAgIGFkZENvaW5zKHRoaXMudmFsdWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEl0ZW1Ecm9wIGV4dGVuZHMgRHJvcCB7XG4gICAgbGV2ZWw7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRzOiBJRHJvcE9wdGlvbnMgJiB7IGxldmVsPzogbnVtYmVyIHwgc3RyaW5nLCBmaW5pc2g6ICgpID0+IHZvaWQgfSkge1xuICAgICAgICBzdXBlcihvcHRzKTtcblxuICAgICAgICB0aGlzLmxldmVsID0gb3B0cy5sZXZlbDtcbiAgICB9XG5cbiAgICBmaW5pc2goKSB7XG4gICAgICAgIC8vIHNldCBjYWxsYmFjayBpbiBvcHRpb25zXG4gICAgICAgIGNvbnNvbGUubG9nKCdubyBjYWxsYmFjayBmb3IgJywgdGhpcylcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZmluaXNoKCk7XG4gICAgfVxufSJdfQ==
