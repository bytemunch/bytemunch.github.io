import { frameCount } from "../main.js";
export class Sprite {
    constructor(src, w = 32, h = 32) {
        this.animate = 'loop';
        this.animationState = 0;
        this._frameRate = Math.floor(60 / 1);
        this.drawFinished = false;
        this.cnv = new OffscreenCanvas(w, h);
        this.ctx = this.cnv.getContext('2d');
        this.ctx.imageSmoothingEnabled = false;
        this.spriteWidth = w;
        this.spriteHeight = h;
        this.img = new Image();
        this.ready = new Promise(res => {
            this.img.addEventListener('load', () => {
                this.cnv.width = w;
                this.cnv.height = h;
                this.sheetWidth = this.img.width;
                this.draw();
                res();
            });
        });
        this.img.src = src;
    }
    set frameRate(fr) {
        this._frameRate = Math.floor(60 / fr);
    }
    draw() {
        const drawImage = () => {
            this.ctx.clearRect(0, 0, this.cnv.width, this.cnv.height);
            this.ctx.drawImage(this.img, this.animationState * this.spriteWidth, 0, this.spriteWidth, this.spriteHeight, 0, 0, this.cnv.width, this.cnv.height);
        };
        switch (this.animate) {
            case 'loop':
                // initial draw
                // this.ctx.drawImage(this.img, 0, 0, this.spriteWidth, this.spriteHeight, 0, 0, this.cnv.width, this.cnv.height);
                // animate
                // TODO don't depend on _frameRate
                if (frameCount % this._frameRate == 0) {
                    this.ctx.clearRect(0, 0, this.cnv.width, this.cnv.height);
                    this.ctx.drawImage(this.img, this.animationState, 0, this.spriteWidth, this.spriteHeight, 0, 0, this.cnv.width, this.cnv.height);
                    this.animationState += this.spriteWidth;
                    if (this.animationState >= this.sheetWidth)
                        this.animationState = 0;
                }
                break;
            case 'stepped':
                drawImage();
                break;
            default:
                if (this.drawFinished)
                    return;
                drawImage();
                this.drawFinished = true;
                break;
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFHLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQzFELElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDakksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDO29CQUN4QyxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLFVBQVU7d0JBQ3RDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO2lCQUMvQjtnQkFFRCxNQUFNO1lBQ1YsS0FBSyxTQUFTO2dCQUNWLFNBQVMsRUFBRSxDQUFDO2dCQUNaLE1BQU07WUFDVjtnQkFDSSxJQUFJLElBQUksQ0FBQyxZQUFZO29CQUFFLE9BQU87Z0JBQzlCLFNBQVMsRUFBRSxDQUFBO2dCQUNYLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO2dCQUN6QixNQUFNO1NBQ2I7SUFDTCxDQUFDO0NBQ0oiLCJmaWxlIjoiY2xhc3MvU3ByaXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJhbWVDb3VudCB9IGZyb20gXCIuLi9tYWluLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBTcHJpdGUge1xuICAgIGNudjogT2Zmc2NyZWVuQ2FudmFzO1xuICAgIGN0eDtcbiAgICBzaGVldFdpZHRoOiBudW1iZXI7XG4gICAgcmVhZHk6IFByb21pc2U8YW55PjtcblxuICAgIHNwcml0ZVdpZHRoOiBudW1iZXI7XG4gICAgc3ByaXRlSGVpZ2h0OiBudW1iZXI7XG5cbiAgICBhbmltYXRlOiBzdHJpbmcgPSAnbG9vcCc7XG4gICAgYW5pbWF0aW9uU3RhdGU6IG51bWJlciA9IDA7XG4gICAgX2ZyYW1lUmF0ZTogbnVtYmVyID0gTWF0aC5mbG9vcig2MC8xKTtcblxuICAgIGltZzogSFRNTEltYWdlRWxlbWVudDtcblxuICAgIGRyYXdGaW5pc2hlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3Ioc3JjLCB3ID0gMzIsIGggPSAzMikge1xuICAgICAgICB0aGlzLmNudiA9IG5ldyBPZmZzY3JlZW5DYW52YXModywgaCk7XG4gICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jbnYuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdGhpcy5jdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5zcHJpdGVXaWR0aCA9IHc7XG4gICAgICAgIHRoaXMuc3ByaXRlSGVpZ2h0ID0gaDtcblxuICAgICAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgIHRoaXMucmVhZHkgPSBuZXcgUHJvbWlzZShyZXMgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNudi53aWR0aCA9IHc7XG4gICAgICAgICAgICAgICAgdGhpcy5jbnYuaGVpZ2h0ID0gaDtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2hlZXRXaWR0aCA9IHRoaXMuaW1nLndpZHRoO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICAgICAgcmVzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbWcuc3JjID0gc3JjO1xuICAgIH1cblxuICAgIHNldCBmcmFtZVJhdGUoZnIpIHtcbiAgICAgICAgdGhpcy5fZnJhbWVSYXRlID0gTWF0aC5mbG9vcig2MC9mcik7XG4gICAgfVxuXG4gICAgZHJhdygpIHtcbiAgICAgICAgY29uc3QgZHJhd0ltYWdlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY252LndpZHRoLCB0aGlzLmNudi5oZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKHRoaXMuaW1nLCB0aGlzLmFuaW1hdGlvblN0YXRlICogdGhpcy5zcHJpdGVXaWR0aCwgMCwgdGhpcy5zcHJpdGVXaWR0aCwgdGhpcy5zcHJpdGVIZWlnaHQsIDAsIDAsIHRoaXMuY252LndpZHRoLCB0aGlzLmNudi5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLmFuaW1hdGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2xvb3AnOlxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWwgZHJhd1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuY3R4LmRyYXdJbWFnZSh0aGlzLmltZywgMCwgMCwgdGhpcy5zcHJpdGVXaWR0aCwgdGhpcy5zcHJpdGVIZWlnaHQsIDAsIDAsIHRoaXMuY252LndpZHRoLCB0aGlzLmNudi5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgLy8gYW5pbWF0ZVxuICAgICAgICAgICAgICAgIC8vIFRPRE8gZG9uJ3QgZGVwZW5kIG9uIF9mcmFtZVJhdGVcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVDb3VudCAlIHRoaXMuX2ZyYW1lUmF0ZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNudi53aWR0aCwgdGhpcy5jbnYuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKHRoaXMuaW1nLCB0aGlzLmFuaW1hdGlvblN0YXRlLCAwLCB0aGlzLnNwcml0ZVdpZHRoLCB0aGlzLnNwcml0ZUhlaWdodCwgMCwgMCwgdGhpcy5jbnYud2lkdGgsIHRoaXMuY252LmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uU3RhdGUgKz0gdGhpcy5zcHJpdGVXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uU3RhdGUgPj0gdGhpcy5zaGVldFdpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25TdGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzdGVwcGVkJzpcbiAgICAgICAgICAgICAgICBkcmF3SW1hZ2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZHJhd0ZpbmlzaGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZHJhd0ltYWdlKClcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdGaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
