import { DEBUG, camera, layers } from '../main.js';
export class WorldActor {
    constructor(opts) {
        this.visible = false;
        this._x = false;
        this._y = false;
        // console.log(fromJSON);
        this.gridX = opts.gridPosition.gridX;
        this.gridY = opts.gridPosition.gridY;
        this.type = opts.type;
        this.sprite = opts.sprite;
    }
    get img() {
        try {
            return this.sprite.cnv;
        }
        catch (e) {
            console.log(this.type);
            console.error(e);
        }
    }
    get xOffset() {
        return this.gridY % 2 ? 0 : this.width / 2;
    }
    get yOffset() {
        return 0;
    }
    //TODO magic numbers
    get x() {
        if (this._x === false) {
            this._x = (this.gridX * 64 + this.xOffset);
        }
        return this._x;
    }
    get y() {
        if (this._y === false) {
            this._y = (this.gridY * 16 + this.yOffset);
        }
        return this._y;
    }
    get ctx() {
        return layers[this.layer].ctx;
    }
    get cnv() {
        return layers[this.layer].cnv;
    }
    draw() {
        if (this.visible) {
            try {
                layers[this.layer].ctx.drawImage(this.img, Math.floor(this.x), Math.floor(this.y));
            }
            catch (e) {
                console.info(this.layer);
            }
            if (DEBUG.boundingBoxes)
                layers[this.layer].ctx.strokeRect(this.x, this.y, this.width, this.height);
            return true;
        }
        return false;
    }
    update() {
        this.visible = camera.inView(this);
        // this.visible = true; // camera testing, render everything
    }
    collides(x, y) {
        return (x > this.x * camera.scale && y > this.y * camera.scale && x < (this.x + this.width) * camera.scale && y < (this.y + this.height) * camera.scale);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEcsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLDREQUE0RDtJQUNoRSxDQUFDO0lBRUQsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ1QsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3SixDQUFDO0NBQ0oiLCJmaWxlIjoiY2xhc3MvV29ybGRBY3Rvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNwcml0ZSB9IGZyb20gJy4vU3ByaXRlLmpzJztcbmltcG9ydCB7IERFQlVHLCBjYW1lcmEsIGxheWVycyB9IGZyb20gJy4uL21haW4uanMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElBY3Rvck9wdGlvbnMge1xuICAgIGdyaWRQb3NpdGlvbjogeyBncmlkWDogbnVtYmVyLCBncmlkWTogbnVtYmVyIH0sXG4gICAgc3ByaXRlOiBTcHJpdGUsXG4gICAgZHJvcHBhYmxlPzogYm9vbGVhbixcbiAgICBkcmFnZ2FibGU/OiBib29sZWFuLFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBsZXZlbD86IG51bWJlclxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgV29ybGRBY3RvciB7XG4gICAgX3g6IG51bWJlciB8IGZhbHNlO1xuICAgIF95OiBudW1iZXIgfCBmYWxzZTtcblxuICAgIGdyaWRYOiBudW1iZXI7XG4gICAgZ3JpZFk6IG51bWJlcjtcblxuICAgIHNwcml0ZTogU3ByaXRlO1xuXG4gICAgbGF5ZXI6IG51bWJlcjtcblxuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG5cbiAgICB0eXBlO1xuXG4gICAgdmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3Iob3B0cz86IElBY3Rvck9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5feCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl95ID0gZmFsc2U7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coZnJvbUpTT04pO1xuXG4gICAgICAgIHRoaXMuZ3JpZFggPSBvcHRzLmdyaWRQb3NpdGlvbi5ncmlkWDtcbiAgICAgICAgdGhpcy5ncmlkWSA9IG9wdHMuZ3JpZFBvc2l0aW9uLmdyaWRZO1xuXG4gICAgICAgIHRoaXMudHlwZSA9IG9wdHMudHlwZTtcblxuICAgICAgICB0aGlzLnNwcml0ZSA9IG9wdHMuc3ByaXRlO1xuICAgIH1cblxuICAgIGdldCBpbWcoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGUuY252O1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnR5cGUpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCB4T2Zmc2V0KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWRZICUgMiA/IDAgOiB0aGlzLndpZHRoIC8gMjtcbiAgICB9XG5cbiAgICBnZXQgeU9mZnNldCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvL1RPRE8gbWFnaWMgbnVtYmVyc1xuXG4gICAgZ2V0IHgoKSB7XG4gICAgICAgIGlmICh0aGlzLl94ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5feCA9ICh0aGlzLmdyaWRYICogNjQgKyB0aGlzLnhPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgIH1cblxuICAgIGdldCB5KCkge1xuICAgICAgICBpZiAodGhpcy5feSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3kgPSAodGhpcy5ncmlkWSAqIDE2ICsgdGhpcy55T2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICB9XG5cbiAgICBnZXQgY3R4KCk6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCB7XG4gICAgICAgIHJldHVybiBsYXllcnNbdGhpcy5sYXllcl0uY3R4O1xuICAgIH1cblxuICAgIGdldCBjbnYoKTogSFRNTENhbnZhc0VsZW1lbnQge1xuICAgICAgICByZXR1cm4gbGF5ZXJzW3RoaXMubGF5ZXJdLmNudjtcbiAgICB9XG5cbiAgICBkcmF3KCkge1xuICAgICAgICBpZiAodGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxheWVyc1t0aGlzLmxheWVyXS5jdHguZHJhd0ltYWdlKHRoaXMuaW1nLCBNYXRoLmZsb29yKHRoaXMueCksIE1hdGguZmxvb3IodGhpcy55KSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKHRoaXMubGF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKERFQlVHLmJvdW5kaW5nQm94ZXMpIGxheWVyc1t0aGlzLmxheWVyXS5jdHguc3Ryb2tlUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgICB0aGlzLnZpc2libGUgPSBjYW1lcmEuaW5WaWV3KHRoaXMpO1xuICAgICAgICAvLyB0aGlzLnZpc2libGUgPSB0cnVlOyAvLyBjYW1lcmEgdGVzdGluZywgcmVuZGVyIGV2ZXJ5dGhpbmdcbiAgICB9XG5cbiAgICBjb2xsaWRlcyh4LCB5KSB7XG4gICAgICAgIHJldHVybiAoeCA+IHRoaXMueCAqIGNhbWVyYS5zY2FsZSAmJiB5ID4gdGhpcy55ICogY2FtZXJhLnNjYWxlICYmIHggPCAodGhpcy54ICsgdGhpcy53aWR0aCkgKiBjYW1lcmEuc2NhbGUgJiYgeSA8ICh0aGlzLnkgKyB0aGlzLmhlaWdodCkgKiBjYW1lcmEuc2NhbGUpO1xuICAgIH1cbn1cbiJdfQ==
